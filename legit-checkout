#!/usr/bin/perl -w
# Created by Nikil Singh z5209322

# Check if a .legit directory has been initialised.
opendir(DIR,".legit") or die "legit-branch: error: no .legit directory containing legit repository exists\n";
closedir(DIR);

# Gets the current branch.
open F, '<', ".legit/branch.txt";
@lines = <F>;
$currBranch = $lines[0];
chomp $currBranch;
close F;

# Checks if any previous commit have been made.
opendir(DIR,".legit/.prev/$currBranch/0") or die "legit-branch: error: your repository does not have any commits yet\n";
closedir(DIR);

# Checks if the appropriate number of arguements are given.
if ($#ARGV != 0) {
    die "usage: legit-checkout <branch>\n";
}

# Sets branch name to change to, into an easier to read variable name.
$branch = $ARGV[0];

# Checks if branch to checkout to exists.
$found = 0;
opendir(DIR, ".legit/.index/") or die "legit-branch: error: something went wrong with legit-init\n.";
while (my $br = readdir(DIR)) {
    if ($br eq $branch) {
        $found = 1;
    }
}
closedir(DIR);

# If the branch is not found.
if ($found == 0) {
    die "legit-checkout: error: unknown branch '$branch'\n";
}

# Checks if branch to checkout to is the current branch.
if ($currBranch eq $branch) {
    die "Already on '$branch'\n";
}

# Gets all tracked filenames for the current branch.
# Gets all filenames from the index for current branch.
opendir(DIR, ".legit/.index/$currBranch");
while (my $file = readdir(DIR)) {
    if (-f ".legit/.index/$currBranch/$file") {
        # @oldTrackedFiles holds filenames from current branch.
        push @oldTrackedFiles, $file;
    }
}
closedir(DIR);

# Gets number of last commit for current branch.
open F, '<', ".legit/.prev/$currBranch/branchLog.txt";
@lines = <F>;
$prevCommit = $lines[$#lines];
$prevCommit =~ s/ .*//;
chomp $prevCommit;
close F;

# Gets all filenames from previous commit in the current branch.
opendir(DIR, ".legit/.commits/$prevCommit");
while (my $file = readdir(DIR)) {
    if (-f ".legit/.commits/$prevCommit/$file") {
        if (!(grep(/^$file$/,@oldTrackedFiles))) {
            # If file wasn't already in tracked files.
            push @oldTrackedFiles, $file;
        }
    }
}
closedir(DIR);

# Gets all tracked filenames from new branch being checked out to.
# Gets all filenames from index for new branch.
opendir(DIR, ".legit/.index/$branch");
while (my $file = readdir(DIR)) {
    if (-f ".legit/.index/$branch/$file") {
        # @newTrackedFiles holds filenames from new branch.
        push @newTrackedFiles, $file;
    }
}
closedir(DIR);

# Gets number of last commit for current branch.
open F, '<', ".legit/.prev/$branch/branchLog.txt";
@lines = <F>;
$prevCommit = $lines[$#lines];
$prevCommit =~ s/ .*//;
chomp $prevCommit;
close F;

# Gets all filenames from previous commit in the new branch.
opendir(DIR, ".legit/.commits/$prevCommit");
while (my $file = readdir(DIR)) {
    if (-f ".legit/.commits/$prevCommit/$file") {
        if (!(grep(/^$file$/,@newTrackedFiles))) {
            # If file wasn't already in tracked files.
            push @newTrackedFiles, $file;
        }
    }
}
closedir(DIR);

# Allows for the use of the copy function.
use File::Copy qw(copy);

# Gets path for current directory locally.
use Cwd qw(getcwd);
$directory = getcwd;

# Updates current directory folder in .legit for all tracked files in current
# branch.
opendir(DIR, "$directory");
while (my $file = readdir(DIR)) {
    if (grep(/^$file$/,@oldTrackedFiles)) {
        # Updates the current directory for the current branch.
        copy($file, ".legit/.current/$currBranch/");
    }
}
closedir(DIR);

# Updates the current directory locally, to that of the new branches.
# Copies files into current directory that are being tracked by new branch.
opendir(DIR, ".legit/.current/$branch/");
while (my $file = readdir(DIR)) {
    if (grep(/^$file$/,@newTrackedFiles)) {
        copy(".legit/.current/$branch/$file","$directory");
    }
}
closedir(DIR);

# Removes files from current directory that are being tracked by current branch
# but not tracked by the new branch.
opendir(DIR, "$directory/");
while (my $file = readdir(DIR)) {
    if ((grep(/^$file$/,@oldTrackedFiles)) && !(grep(/^$file$/,@newTrackedFiles))) {
        unlink $file;
    }
}
closedir(DIR);

# Switches branches.
open F, '>', ".legit/branch.txt" or die "legit-branch: error: something went wrong with legit-init\n.";
print F "$branch";
close F;

print "Switched to branch '$branch'\n";
