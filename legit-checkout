#!/usr/bin/perl -w
# Created by Nikil Singh z5209322

# Check if a .legit directory has been initialised.
opendir(DIR,".legit") or die "legit-branch: error: no .legit directory containing legit repository exists\n";
closedir(DIR);

# Gets the current branch.
open F, '<', ".legit/branch.txt";
@lines = <F>;
$currBranch = $lines[0];
chomp $currBranch;
close F;

# Checks if any previous commit have been made.
opendir(DIR,".legit/.prev/$currBranch/0") or die "legit-branch: error: your repository does not have any commits yet\n";
closedir(DIR);

# Checks if the appropriate number of arguements are given.
if ($#ARGV != 0) {
    die "usage: legit-checkout <branch>\n";
}

# Checks if branch to checkout to exists.
$found = 0;
opendir(DIR, ".legit/.index/") or die "legit-branch: error: something went wrong with legit-init\n.";
while (my $dir = readdir(DIR)) {
    if ($dir eq $ARGV[0]) {
        $found = 1;
    }
}
closedir(DIR);
$branch = $ARGV[0];
# If the branch is not found.
if ($found == 0) {
    die "legit-checkout: error: unknown branch '$branch'\n";
}

# Checks if on the same branch.
if ($currBranch eq $branch) {
    die "Already on '$branch'\n";
}

# Gets all tracked filenames for current directory for the current branch.
# Gets filenames from index.
opendir(DIR, ".legit/.index/$currBranch");
while (my $file = readdir(DIR)) {
    if (-f ".legit/.index/$currBranch/$file") {
        push @currentTrackedFiles, $file;
    }
}
closedir(DIR);

# Gets the number for the last commit in current branch.
open F, '<', ".legit/.prev/$currBranch/branchLog.txt";
@lines = <F>;
foreach $line (@lines) {
    chomp $line;
    $lastLine = $line;
}
# Removes all non-digit characters from string.
$lastLine =~ s/\D//g;
close F;

# Gets filenames from previous commit.
opendir(DIR, ".legit/.prev/$currBranch/$lastLine");
while (my $file = readdir(DIR)) {
    # ADD SOMETHING TO HANDLE EMPTY TRACKEDFILES
    if (!(grep(/^$file$/,@currentTrackedFiles)) && -f ".legit/.prev/$currBranch/$lastLine/$file") {
        # If file wasn't already in tracked files.
        push @currentTrackedFiles, $file;
    }
}
closedir(DIR);

# Gets all tracked filenames for current directory for the branch being checked
# out to.
# Gets filenames from index.
opendir(DIR, ".legit/.index/$branch");
while (my $file = readdir(DIR)) {
    if (-f ".legit/.index/$branch/$file") {
        push @newTrackedFiles, $file;
    }
}
closedir(DIR);

# Gets the number for the last commit in current branch.
open F, '<', ".legit/.prev/$branch/branchLog.txt";
@lines = <F>;
foreach $line (@lines) {
    chomp $line;
    $lastLine = $line;
}
# Removes all non-digit characters from string.
$lastLine =~ s/\D//g;
close F;

# Gets filenames from previous commit.
opendir(DIR, ".legit/.prev/$branch/$lastLine");
while (my $file = readdir(DIR)) {
    # ADD SOMETHING TO HANDLE EMPTY TRACKEDFILES
    if (!(grep(/^$file$/,@newTrackedFiles)) && -f ".legit/.prev/$branch/$lastLine/$file") {
        # If file wasn't already in tracked files.
        push @newTrackedFiles, $file;
    }
}
closedir(DIR);

use File::Copy qw(copy);
# Updates current directory folder for current branch for all tracked files.
opendir(DIR, ".legit/.current/$currBranch");
while (my $file = readdir(DIR)) {
    if (grep(/^$file$/,@currentTrackedFiles)) {
        # Updates the current directory for the current branch.
        copy($file, ".legit/.current/$currBranch/");
    }
}
closedir(DIR);

# Updates current directory locally to that of the branch being changed to.
# Gets path for current directory locally.
use Cwd qw(getcwd);
$directory = getcwd;
# Copies files that are being tracked.
opendir(DIR, ".legit/.current/$branch/");
while (my $file = readdir(DIR)) {
    if (grep(/^$file$/,@newTrackedFiles)) {
        print "copy: $file\n";
        #copy(".legit/.current/$branch/$file","$directory");
    }
}
closedir(DIR);

# Removes files that aren't being tracked by previous branch, but not
# current branch.
opendir(DIR, "$directory/");
while (my $file = readdir(DIR)) {
    if ((grep(/^$file$/,@currentTrackedFiles)) && !(grep(/^$file$/,@newTrackedFiles))) {
        #rm $file;
        print "rm: $file\n";
    }
}
closedir(DIR);

# Switches branches.
open F, '>', ".legit/branch.txt" or die "legit-branch: error: something went wrong with legit-init\n.";
print F "$branch";
close F;

print "Switched to branch '$branch'\n";

# Once new branch is created, u can change to branch and modify files then switch back to branch it was derived from, this applies recursively.
# This no longer applies after the first commit for that branch.
