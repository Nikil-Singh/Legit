#!/usr/bin/perl -w
# Created by Nikil Singh z5209322

# Check if a .legit directory has been initialised.
opendir(DIR, ".legit") or die "legit-branch: error: no .legit directory containing legit repository exists\n";
closedir(DIR);

# Gets the current branch.
open F, '<', ".legit/branch.txt";
@lines = <F>;
$currBranch = $lines[0];
chomp $currBranch;
close F;

# Checks if any previous commit have been made.
opendir(DIR,".legit/.prev/$currBranch/0") or die "legit-branch: error: your repository does not have any commits yet\n";
closedir(DIR);

# Checks if no arguements are given.
if ($#ARGV == -1) {
    # Displays all branches in alphabetical order.
    opendir(DIR, ".legit/.index/") or die "legit-branch: error: something went wrong with legit-init\n.";
    while (my $dir = readdir(DIR)) {
        if ($dir ne "." && $dir ne "..") {
            # Adds branch to list of branches.
            push @branches, $dir;
        }
    }
    closedir(DIR);

    # Sorts branches in alphabetical order.
    @branches = sort @branches;

    # Prints list of branches.
    foreach my $branch (@branches) {
        print "$branch\n";
    }

# Checks if one arguement is given.
} elsif ($#ARGV == 0) {
    $newBranch = $ARGV[0];
    # Checks if the one arguement given is "-d".
    if ($newBranch eq "-d") {
        die "legit-branch: error: branch name required\n";
    }

    # Checks if a valid flag was given.
    if ($newBranch =~ m/^-.*$/) {
        die "usage: legit-branch [-d] <branch>\n";
    }

    # Checks if a valid branch name was given.
    if (!($newBranch =~ m/^[A-Za-z][A-Za-z0-9_-]*$/) && !($newBranch =~ m/^[0-9]*[a-zA-Z_-]+[a-zA-Z0-9_-]*$/)) {
        die "legit-branch: error: invalid branch name '$newBranch'\n";
    }

    # Checks if branch already exists.
    opendir(DIR, ".legit/.index/") or die "legit-branch: error: something went wrong with legit-init\n.";
    while (my $dir = readdir(DIR)) {
        if ($dir eq $newBranch) {
            die "legit-branch: error: branch '$newBranch' already exists\n";
        }
    }
    closedir(DIR);

    # Allows for the use of the copy function.
    use File::Copy qw(copy);
    
    # Creates the required directories(branches) and copies the appropriate
    # files over.
    # Copies files over from index.
    mkdir ".legit/.index/$newBranch";
    opendir(DIR, ".legit/.index/$currBranch");
    while (my $file = readdir(DIR)) {
        if (-f ".legit/.index/$currBranch/$file") {
            # Copies files from current branch to new branch index.
            copy(".legit/.index/$currBranch/$file", ".legit/.index/$newBranch/");
            # Keeps track of files that are being tracked by legit.
            push @trackedFiles, $file;
        }
    }
    closedir(DIR);

    # Gets the number for the last commit in current branch.
    open F, '<', ".legit/.prev/$currBranch/branchLog.txt";
    @lines = <F>;
    foreach $line (@lines) {
        chomp $line;
        $lastCommit = $line;
    }
    # Removes all non-digit characters from string.
    $lastCommit =~ s/\D//g;
    close F;

    # For all previous commits.
    mkdir ".legit/.prev/$newBranch";
    opendir(DIR, ".legit/.prev/$currBranch");
    while (my $prevCommit = readdir(DIR)) {
        # If previous commit is a directory in current branch.
        if ($prevCommit ne "." && $prevCommit ne ".." && -d ".legit/.prev/$currBranch/$prevCommit") {
            opendir(COMMIT, ".legit/.prev/$currBranch/$prevCommit");
            # Creates directory for previous commit in new branch.
            mkdir ".legit/.prev/$newBranch/$prevCommit";
            while (my $file = readdir(COMMIT)) {
                if (-f ".legit/.prev/$currBranch/$prevCommit/$file") {
                    # Copies file from previous commit of current branch to the
                    # new branch.
                    copy(".legit/.prev/$currBranch/$prevCommit/$file", ".legit/.prev/$newBranch/$prevCommit/");

                    # Checks if file is being tracked, and if not already in
                    # array, then adds to the array. Considers files in index
                    # and previous commit.
                    if (!(grep(/^$file$/,@trackedFiles)) && $prevCommit eq $lastCommit) {
                        # If file wasn't already in tracked files.
                        push @trackedFiles, $file;
                    }
                }
            }
            closedir(COMMIT);
        }
    }
    # Copies over the branch log.
    copy(".legit/.prev/$currBranch/branchLog.txt",".legit/.prev/$newBranch/");
    closedir(DIR);

    # Creates current directory folder in .legit for new branch.
    mkdir ".legit/.current/$newBranch";
    opendir(DIR, ".");
    while (my $file = readdir(DIR)) {
        # Checks if the file is being tracked.
        if (grep(/^$file$/,@trackedFiles) && -f $file) {
            # Copies file into new branches current directory folder.
            copy($file, ".legit/.current/$newBranch/");
            # Updates the current directory for the current branch.
            copy($file, ".legit/.current/$currBranch/");
        }

    }
    closedir(DIR);

    # Creates a temporary index and temporary current directory, which exists
    # till a commit is made.
    mkdir ".legit/.tmpInd";
    mkdir ".legit/.tmpCur";

    # Copies over files into new temporary directory.
    foreach my $file (@trackedFiles) {
        # Exists in index.
        if (-f ".legit/.index/$currBranch/$file") {
            copy(".legit/.index/$currBranch/$file",".legit/.tmpInd/");
        }

        # Exists in local current directory.
        if (-f ".legit/.current/$currBranch/$file") {
            copy(".legit/.current/$currBranch/$file",".legit/.tmpCur/");
        }
    }

# Checks if two arguements are given.
} elsif ($#ARGV == 1) {
    $newBranch = $ARGV[1];
    # Checks if a valid flag was given.
    if ($ARGV[0] ne "-d") {
        die "usage: legit-branch [-d] <branch>\n";
    }

    # Checks if a valid branch name was given.
    if (!($newBranch =~ m/^[A-Za-z][A-Za-z0-9_-]*$/) && !($newBranch =~ m/^[0-9]*[a-zA-Z_-]+[a-zA-Z0-9_-]*$/)) {
        die "legit-branch: error: invalid branch name '$newBranch'\n";
    }

    # Checks if branch name is master.
    if ($newBranch eq "master") {
        die "legit-branch: error: can not delete branch 'master'\n";
    }

    # Checks if branch exists.
    $found = 0;
    opendir(DIR, ".legit/.index/") or die "legit-branch: error: something went wrong with legit-init\n.";
    while (my $dir = readdir(DIR)) {
        if ($dir eq $newBranch) {
            $found = 1;
        }
    }

    # If the branch is not found.
    if ($found == 0) {
        die "legit-branch: error: branch '$newBranch' does not exist\n";
    }

    # Check for unmerged changes.

    # Deletes the branch.
    use File::Path qw(remove_tree);
    remove_tree(".legit/.index/$newBranch", ".legit/.prev/$newBranch", ".legit/.current/$newBranch");

    print "Deleted branch '$newBranch'\n";
# Checks if more than two are given.
} else {
    # Too many arguements were given.
    die "usage: legit-branch [-d] <branch>\n";
}
