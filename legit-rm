#!/bin/dash
# Created by Nikil Singh z5209322

# Check if a .legit directory has been initialised.
if  ! test -d .legit
then
    echo "legit-rn: error: no .legit directory containing legit repository exists"
    exit 1
fi

# Gets the current branch.
branch=`cat .legit/branch.txt`

# Checks if repository has any commits.
if ! ls -l .legit/.prev/$branch/| egrep -c ^d > /dev/null
then
    echo "legit-rm: error: your repository does not have any commits yet"
    exit 1
fi

cFlag=""            # String for checking --cached flag.
fFlag=""            # String for checking --force flag.
files=""            # String holds all files.

# Checks if there is only one arguement.
if test $# -eq 1
then
    # Checks if the only arguement given is the filename.
    if test "$1" != "--cached" -a "$1" != "--force"
    then
        files="$1"
    else
        echo "usage: legit-rm [--force] [--cached] <filenames>"
        exit 1
    fi
# Otherwise, checks if number of arguements in regards to flags, number of files
# and their order are correct. NOTE: Only realised after finishing that flags
# in any order would not be tested.
else
    prevLastFile=0      # Position of last file checked.
    currLastFile=0      # Position of current file checked.
    filePosDiff=0       # Difference in position of current and previous file poisitions.
    numFiles=0          # The number of files read.
    counter=0           # Counter for number of arguements processed.
    for arg in $@
    do
        # Checks if the --cached flag was given.
        if test "$arg" = "--cached"
        then
            # Checks for duplicate --cached flags.
            if test "$cFlag" = ""
            then
                cFlag="$arg"
            else
                echo "usage: legit-rm [--force] [--cached] <filenames>"
                exit 1
            fi
        # Checks if the --force flag was given.
        elif test "$arg" = "--force"
        then
            # Checks for duplicate --force flags.
            if test "$fFlag" = ""
            then
                fFlag="$arg"
            else
                echo "usage: legit-rm [--force] [--cached] <filenames>"
                exit 1
            fi
        else
            # Checks for duplicate file names.
            if `echo "$files" | egrep -v "$arg" > /dev/null`
            then
                # Concatenates filenames to files.
                files=`echo $files $arg`
            fi

            # The following checks if all files are entered together and not
            # separately. i.e. legit-rm file1 --cached file2 should not work.
            # Updates the number of files seen.
            numFiles=`expr $numFiles + 1`

            # If first file is found, then sets prevLastFile to that args position.
            if test $numFiles -eq 1
            then
                prevLastFile=$counter
            else
                prevLastFile=$currLastFile
            fi

            # Updates position for currLastFile to position of latest arg.
            currLastFile=$counter

            # Gets the difference between current and previous file position.
            filePosDiff=`expr $currLastFile - $prevLastFile`

            # If difference is greater than or equal to 2, then order of arguements
            # entereed is incorrect.
            if test $filePosDiff -ge 2
            then
                echo "usage: legit-rm [--force] [--cached] <filenames>"
                exit 1
            fi
        fi
        counter=`expr $counter + 1`
    done
fi

# Checks if correct number of arguements in relation to flags were given.
if test $# -eq 2
then
    # Checks if both arguements are only flags.
    if test "$1" = "--force" -a "$2" = "--cached"
    then
        echo "usage: legit-rm [--force] [--cached] <filenames>"
        exit 1
    elif test "$1" = "--cached" -a "$2" = "--force"
    then
        echo "usage: legit-rm [--force] [--cached] <filenames>"
        exit 1
    fi
fi

# Check if file is in .legit repository.
for file in $files
do
    if ! test -e .legit/.index/$branch/$file
    then
        echo "legit-rm: error: '$file' is not in the legit repository"
        exit 1
    fi
done

# Gets number of previous commit for branch.
prevCommit=`ls .legit/.prev/$branch/ | tail -n 2 | head -n 1`

# If force flag is not given.
if ! test "$fFlag" = "--force"
then
    # Checks if file is different in index, previous commit and current directory.
    for file in $files
    do
        # Checks if file is in current directory and previos commit.
        if test -e $file -a -e .legit/.prev/$branch/$prevCommit/$file
        then
            # Checks if file in current directory is NOT the same as the one in index.
            if ! diff $file .legit/.index/$branch/$file > /dev/null
            then
                # Checks if file in index is NOT the same as previous commit.
                if ! diff .legit/.index/$branch/$file .legit/.prev/$branch/$prevCommit/$file > /dev/null
                then
                    # Here file in Index != Previous Commit && CD
                    echo "legit-rm: error: '$file' in index is different to both working file and repository"
                    exit 1
                else
                    if test "$cFlag" != "--cached"
                    then
                        # Here file in Index == Previous Commit != CD
                        echo "legit-rm: error: '$file' in repository is different to working file"
                        exit 1
                    fi
                fi
            # If file in current directory is the same as the one in index.
            else
                # Checks if file in current directory is NOT the same as previous commit.
                if ! diff $file .legit/.prev/$branch/$prevCommit/$file > /dev/null
                then
                    if test "$cFlag" != "--cached"
                    then
                        # Here file in CD == Index != Previous Commit.
                        echo "legit-rm: error: '$file' has changes staged in the index"
                        exit 1
                    fi
                fi
            fi
        # If file is only in index and current directory.
        elif test -e $file
        then
            # Checks if file in index is NOT the same as file in current directory.
            if ! diff $file .legit/.index/$branch/$file > /dev/null
            then
                # Here CD != Index.
                echo "legit-rm: error: '$file' in index is different to both working file and repository"
                exit 1
            # Cheks if file in index is the same as current directory and non-existent in previous commit.
            elif diff $file .legit/.index/$branch/$file > /dev/null
            then
                # Here file in CD == Index != Previous Commit.
                if test "$cFlag" != "--cached"
                then
                    echo "legit-rm: error: '$file' has changes staged in the index"
                    exit 1
                fi
            fi
        fi
    done
fi

# Does the actual removal of files.
for file in $files
do
    # For deleting file in current directory.
    if test -e $file -a "$cFlag" != "--cached"
    then
        rm $file
    fi

    # For deleting file in index.
    if test -e .legit/.index/$branch/$file
    then
        rm .legit/.index/$branch/$file
    fi
done
