#!/bin/dash
# Created by Nikil Singh z5209322

# Check if a .legit directory has been initialised.
if  ! test -d .legit
then
    echo "legit-add: error: no .legit directory containing legit repository exists"
    exit 1
fi

# Gets the current branch.
branch=`cat .legit/branch.txt`
if test -d ".legit/.tmpInd"
then
    index=".tmpInd"
else
    index=".index/$branch"
fi
# Checks if repository has any commits.
if ! ls -l .legit/.prev/$branch/| egrep -c ^d > /dev/null
then
    echo "legit-rm: error: your repository does not have any commits yet"
    exit 1
fi

files=""    # Variable to hold all files.
found=0     # Variable for whether a file has been seen.
# Gets all the files from current directory, index and the previous commit.
# Checks all files in current directory.
numFiles=`ls -l | egrep -c ^-`
if test $numFiles -ne 0
then
    for file in *
    do
        # Checks if file is not a directory.
        if ! test -d $file
        then
            found=0
            # Checks if file is already held in $files.
            for tmpFile in $files
            do
                # Checks for duplicate files.
                if test $tmpFile = $file
                then
                    found=1
                fi
            done
            # If the file is not a duplicate file.
            if test $found -eq 0
            then
                # Concatenates the filename to $files separated by a space.
                files=`echo $files $file`
            fi
        fi
    done
fi

found=0
# Checks all files in index
numFiles=`ls -l .legit/$index| egrep -c ^-`
if test $numFiles -ne 0
then
    for file in .legit/$index/*
    do
        # Checks if file is not a directory.
        modifiedFile=`echo $file | sed 's/.*[/]//g'`
        if ! test -d $file
        then
            found=0
            # Checks if file is already held in $files.
            for tmpFile in $files
            do
                # Checks for duplicate files.
                if test $tmpFile = $modifiedFile
                then
                    found=1
                fi
            done
            # If the file is not a duplicate file.
            if test $found -eq 0
            then
                files=`echo $files $modifiedFile`
            fi
        fi
    done
fi

found=0
# Gets number of previous commit for branch.
prevCommit=`ls .legit/.prev/$branch/ | tail -n 2 | head -n 1`
# Checks all files in previous commit.
numFiles=`ls -l .legit/.prev/$branch/$prevCommit| egrep -c ^-`
if test $numFiles -ne 0
then
    for file in .legit/.prev/$branch/$prevCommit/*
    do
        # Checks if file is not a directory.
        modifiedFile=`echo $file | sed 's/.*[/]//g'`
        if ! test -d $file
        then
            found=0
            # Checks if file is already held in $files.
            for tmpFile in $files
            do
                # Checks for duplicate files.
                if test $tmpFile = $modifiedFile
                then
                    found=1
                fi
            done
            # If the file is not a duplicate file.
            if test $found -eq 0
            then
                files=`echo $files $modifiedFile`
            fi
        fi
    done
fi
# Sorts all the files into alphabetical order.
# Creates a tmpFile to hold alphabetically sorted files.
touch .legit/tmpFile

for file in $files
do
    # Outputs each file into the tmpFile
    echo $file >> .legit/tmpFile
done

# Sorts the file in tmpFile.
files=`sort .legit/tmpFile`

# Removes the tmp file.
rm .legit/tmpFile

# Compare the files in current directory, index and previous commit, then outputs
# the appropriate message for that file describing its status.
for file in $files
do
    # If file is in current directory, index and previous commit.
    if test -e $file -a -e .legit/$index/$file -a -e .legit/.prev/$branch/$prevCommit/$file
    then
        # Checks if file in index is NOT the same as file in current directory.
        if ! diff .legit/$index/$file $file > /dev/null
        then
            # Checks if file in index is NOT the same as file in previous commit.
            if ! diff .legit/$index/$file .legit/.prev/$branch/$prevCommit/$file > /dev/null
            then
                # Here file in Index != Current Directory [== || !=] Previous Commit.
                echo "$file - file changed, different changes staged for commit"
            else
                # Here file in Current Directory != Index == Previous Commit.
                echo "$file - file changed, changes not staged for commit"
            fi
        else
            # Checks if file in index is NOT the same as file in previous commit.
            if ! diff .legit/$index/$file .legit/.prev/$branch/$prevCommit/$file > /dev/null
            then
                # Here file in Index == Current Directory != Previous Commit.
                echo "$file - file changed, changes staged for commit"
            else
                # Here file in Index == Current Directory == Previous Commit.
                echo "$file - same as repo"
            fi
        fi

    # If file is in current directory and index.
    elif test -e $file -a -e .legit/$index/$file
    then
        echo "$file - added to index"

    # If file is in index and previous commit.
    elif test -e .legit/$index/$file -a -e .legit/.prev/$branch/$prevCommit/$file
    then
        # Checks if file in index is NOT the same as file in previous commit.
        if ! diff .legit/$index/$file .legit/.prev/$branch/$prevCommit/$file > /dev/null
        then
            # Here file in Index != Previous Commit.
            echo "$file - file deleted, different changes staged for commit"
        else
            # Here file in Index == Previous Commit.
            echo "$file - file deleted"
        fi

    # If file is in current directory only.
    elif test -e $file
    then
        echo "$file - untracked"

    # If file is in index only.
    elif test -e .legit/$index/$file
    then
        echo "$file - added to index"

    # If file is in previous commmit only.
    elif test -e .legit/.prev/$branch/$prevCommit/$file
    then
        echo "$file - deleted"
    fi
done
