#!/bin/dash
# Created by Nikil Singh z5209322

# Check if a .legit directory has been initialised.
if  ! test -d .legit
then
    echo "legit-commit: error: no .legit directory containing legit repository exists"
    exit 1
fi

# Gets the current branch.
branch=`cat .legit/branch.txt`

# Checks if a temporary index is being used when switching branches.
if test -d ".legit/.tmpInd"
then
    # If temporary branch exists, set index to tempInd.
    index=".tmpInd"
else
    # If temporary branch does not exist, set index to that of the current
    # branches.
    index=".index/$branch"
fi

# Checks if the correct flags are given in the correct order based on how many
# arguements are given. Also gets message based on the number of arguements
# given. Also check if correct number of arguements are given. The following
# sets variables for the sake of readability.
# If number of arguements is 2.
if test $# -eq 2
then
    # If in order -m <message>
    if test "$1" = "-m" -a "$2" != "-m" -a "$2" != "-a"
    then
        tmpMessage=$2
    else
        echo "usage: legit-commit [-a] -m commit-message"
        exit 1
    fi
# If number of arguements is 3.
elif test $# -eq 3
then
    # If in order -m <message> -a
    if test "$1" = "-m" -a "$3" = "-a" -a "$2" != "-m" -a "$2" != "-a"
    then
        tmpMessage=$2
    # If in order -a -m <message>
    elif test "$1" = "-a" -a "$2" = "-m" -a "$3" != "-m" -a "$3" != "-a"
    then
        tmpMessage=$3
    else
        echo "usage: legit-commit [-a] -m commit-message"
        exit 1
    fi
else
    echo "usage: legit-commit [-a] -m commit-message"
    exit 1
fi

# Removes all whitespace from message.
message=`echo $tmpMessage | sed 's/ *//g'`

#Checks if message is empty.
if test -z $message
then
    echo "usage: legit-commit [-a] -m commit-message"
    exit 1
fi

# Gets number of files to be added.
numFiles=`ls -l .legit/$index/| egrep -c ^-`

# Gets number of previous commits.
numCommits=`ls -l .legit/.commits/| egrep -c ^d`

# Checks if number of files in index is 0, then output error  message.
if test $numFiles -eq 0 -a $numCommits -eq 0
then
    echo "nothing to commit"
    exit 1
fi

# Since flags are correct, and to account for the -a flag the following
# moves the required files over.
if test $# -eq 3
then
    # Cycles through files in index for current branch.
    for file in .legit/$index/*
    do
        # Extracts the file name.
        tmpFilename=`echo $file | sed 's/^.*[/]//g'`
        if test -e $tmpFilename
        then
            # Copy over file from current directory to index.
            cp $tmpFilename $file
        else
            # Remove file from index as it no longer exists in current directory.
            rm $file
        fi
    done
fi

# Checks if there are any previous commits in the branch.
if ls -l .legit/.prev/$branch/| egrep -c ^d > /dev/null
then
    # Sets previous commit number to be the last commit in branch.
    prevCommit=`ls .legit/.prev/$branch/ | tail -n 2 | head -n 1`

    # Gets number of files in previous commit.
    numFilesPrev=`ls -l .legit/.prev/$branch/$prevCommit/| egrep -c ^-`

    # Checks if number of files in index and previous commits is 0.
    if test $numFiles -eq 0 -a $numFilesPrev -eq 0
    then
        echo "nothing to commit"
        exit 1
    fi

    # Checks if same number of files exist in previous commits and index, then
    # checks if all the files are the same and if their contents have changed.
    # If the content hasn't changed, then it outputs an error message.
    if test $numCommits -gt 0 -a $numFiles -eq $numFilesPrev
    then
        dif=0   # Variable holds whether files are different.
        # Cycles through all files in previous commit.
        for file in .legit/.prev/$branch/$prevCommit/*
        do
            # Extracts the filename.
            fileName=`echo $file | sed 's/^.*[/]//g'`
            # Checks if file exists.
            if test -e .legit/$index/$fileName
            then
                # Checks if files have different content.
                if ! diff .legit/$index/$fileName $file > /dev/null
                then
                    # Sets value to 1 since files have different content.
                    dif=1
                fi
            else
                # Sets value to 1 since file no longer exists.
                dif=1
            fi
        done

        # If files don't have different content, then outputs an error message.
        if test $dif -eq 0
        then
            echo "nothing to commit"
            exit 1
        fi
    fi
fi

# Creates directory for commits in branch, where commits begin from 0.
mkdir .legit/.prev/$branch/$numCommits
mkdir .legit/.commits/$numCommits

# Starts copying over the contents of index to a folder for version control.
for file in .legit/$index/*
do
    if test -e $file
    then
        # Copies files over for commits.
        cp $file ".legit/.prev/$branch/$numCommits"
        cp $file ".legit/.commits/$numCommits"

        # If the temporary index is being used.
        if test $index = ".tmpInd"
        then
            # Copies files from temporary index to actual index.
            cp $file ".legit/.index/$branch"
        fi
    fi
done

# If the temporary current directory exists.
for file in *
do
    # Checks if file is being tracked.
    if test -e $file -a -e ".legit/.tmpInd/$file"
    then
        # Copies files from local directory to current branch.
        cp $file ".legit/.current/$branch"
    fi
done

# If the temporary index and current directory exists, they are now deleted.
if test -d ".legit/.tmpInd" -a -d ".legit/.tmpCur"
then
    # Deletes the tmpInd and tmpCur directories.
    rm -rf ".legit/.tmpInd"
    rm -rf ".legit/.tmpCur"
fi

# Updates the commit and branch logs.
echo "$numCommits $tmpMessage" >> .legit/.prev/$branch/branchLog.txt
echo "$numCommits $tmpMessage" >> .legit/.commits/commitLog.txt
echo "Committed as commit $numCommits"
